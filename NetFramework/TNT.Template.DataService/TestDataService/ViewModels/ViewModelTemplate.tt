<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(ProjectDir)bin/Debug/TNT.TemplateAPI.dll" #>
<#@ assembly name="$(ProjectDir)bin/Debug/TNT.Template.DataService.dll" #>
<#@ include file="$(ProjectDir)Templates/TTManager.ttinclude" #>
<#@ import namespace="TNT.Template.DataService.Data" #>
<#@ import namespace="TNT.Template.DataService.ViewModels" #>
<#@ import namespace="static TNT.Template.DataService.Helpers.GeneralHelper" #>
<#
	var projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
	var solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)");
	var dt = new EdmxParser(@"{project}Models/AppEntity.edmx".Replace("{project}", projectPath).Replace("{solution}", solutionPath) ,"TestDataService").Data;
	var manager = TemplateFileManager.Create(this);
#>
<#
	var baseVM = new BaseVMGen(dt);
	manager.StartNewFile("BaseViewModelGen.cs");
#>
<#=baseVM.Generate()#><#
	var jIgnore = new string[]
	{
	};
	var except = new string[]
	{
	};
	foreach (var e in dt.Entities)
	{
		var vmGen = new VMGen(e, jIgnore, except, JsonPropertyFormatEnum.CamelCase);
		manager.StartNewFile(e.EntityName+"ViewModelGen.cs");
#>
<#=vmGen.Generate()#><#
	}
	manager.Process();
#>
